# before changing these variables, make sure the tag $PYTHON_VERSION-alpine$ALPINE_VERSION exists first
# list of valid tags hese: https://hub.docker.com/_/python
ARG PYTHON_VERSION=3.6
ARG ALPINE_VERSION=3.12

# stage-0: install all python deps, build and install package, everything will be available on .venv
FROM python:$PYTHON_VERSION-alpine$ALPINE_VERSION as stage-0
# install runtime first deps to speedup the dev deps and because layers will be reused on stage-1
RUN apk add --no-cache openssl libffi graphviz
RUN apk add --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing rocksdb
# dev deps for this build start here
RUN apk add openssl-dev libffi-dev build-base
RUN apk add --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing rocksdb-dev
# install all deps in a virtualenv so we can just copy it over to the final image
ENV VIRTUAL_ENV=/app/.venv
WORKDIR /app/
RUN python -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
RUN pip --no-input --no-cache-dir install --upgrade "pip<21" wheel
COPY requirements.txt ./requirements.txt
RUN pip --no-input --no-cache-dir install --compile -r requirements.txt

# finally: use production .venv from before
# lean and mean: this image should be about ~50MB, would be about ~470MB if using the whole stage-1
FROM python:$PYTHON_VERSION-alpine$ALPINE_VERSION
RUN apk add --no-cache openssl libffi graphviz
RUN apk add --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing rocksdb
COPY --from=stage-0 /app/.venv/lib/ /usr/local/lib/
COPY dist ./dist
RUN pip --no-input --no-cache-dir install --compile --no-deps dist/hathor-*.whl && rm -rf ./dist
EXPOSE 40403 8080
ENTRYPOINT ["python", "-m", "hathor"]
