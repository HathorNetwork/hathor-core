name: docker
on:
  push:
    branches:
    - master
    - dev
    - 'experimental/**'
    tags:
    - v*
  schedule:
  - cron: '0 4 * * *'  # nightlies at 4am UTC
jobs:
  buildx:
    name: buildx ${{ matrix.python-impl }}-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 180  # default is 360
    strategy:
      matrix:
        python-impl:
        - python
        python-version:
        # - 3.6
        - 3.7
        - 3.8
        - 3.9
        include:
        - python-impl: pypy
          python-version: 3.6
        - python-impl: pypy
          python-version: 3.7
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Prepare tags
      id: prep
      shell: python
      run: |
        import datetime
        import itertools
        import re
        def extract_pyver(filename):
            for line in open(filename).readlines():
                if line.startswith('ARG PYTHON'):
                    return line.split('=')[1].strip()
        ref = '${{ github.ref }}'
        dockerfile_cpython = 'Dockerfile.github'
        dockerfile_pypy = 'Dockerfile.github-pypy'
        default_python = 'python' + extract_pyver(dockerfile_cpython)
        default_pypy = 'pypy' + extract_pyver(dockerfile_pypy)
        if '${{ github.event_name }}' == 'schedule':
            base_version = 'nightly'
        elif ref.startswith('refs/tags/'):
            base_version = ref[10:].split('-', 1)[0]
        elif ref.startswith('refs/heads/'):
            base_version = ref[11:].replace('/', '-')
            if base_version == '${{ github.event.repository.default_branch }}':
              base_version = 'stable'
        elif ref.startswith('refs/pull/'):
            base_version = 'pr-${{ github.event.number }}'
        else:
            base_version = 'noop'
        if '${{ matrix.python-impl }}' == 'pypy':
            dockerfile = dockerfile_pypy
            suffix = 'pypy${{ matrix.python-version }}'
        else:
            dockerfile = dockerfile_cpython
            suffix = 'python${{ matrix.python-version }}'
        version = base_version + '-' + suffix
        tags = {version}
        if suffix == default_python:
            tags.add(base_version)
        elif suffix == default_pypy:
            tags.add(base_version + '-pypy')
        if re.match(r'^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$', base_version):
            minor = base_version.rpartition('.')[0]
            tags.add(minor + '-' + suffix)
            if suffix == default_python:
                tags.add('latest')
        elif '${{ github.event_name }}' == 'push':
            tags.add('sha-' + '${{ github.sha }}'[:8])
        print('::set-output name=version::' + version)
        print('::set-output name=tags::' + ','.join(itertools.chain(('${{ secrets.DOCKERHUB_IMAGE }}:' + t for t in tags),
                                                                    ('${{ secrets.GHCR_IMAGE }}:' + t for t in tags))))
        print('::set-output name=created::' + datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'))
        print('::set-output name=dockerfile::' + dockerfile)
    - name: Set up QEMU  # arm64 is not available natively
      uses: docker/setup-qemu-action@v1
      with:
        platforms: arm64
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
        install: true
        driver-opts: network=host
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Set up Python 3.7 (base) # 3.7 is the fastest to setup, and the specific version doesn't matter here
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install Poetry
      run: pip -q --no-input install poetry
    - name: Cache Poetry dependencies
      uses: actions/cache@v2
      id: poetry-cache
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-py3.7-pypoetry-${{ hashFiles('poetry.lock') }}
    - name: Install Poetry dependencies
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      run: poetry install -n --no-root
    - name: Generate protobuf files
      run: poetry run make protos
    - name: Build source package
      run: |
        rm hathor/protos/.gitignore
        poetry build -f wheel
    - name: Generate requirements
      run: |
        poetry remove -D grpcio-tools --dry-run  # workaround for Poetry bug
        poetry export -o requirements.txt -E rocksdb
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        # this key is setup such that every branch has its cache and new branches can reuse dev's cache, but not the other way around
        key: ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-${{ github.head_ref || github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-${{ github.head_ref || github.ref }}-
          ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-refs/heads/dev-
          ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-
    - name: Build and push
      uses: docker/build-push-action@v2
      id: docker_build
      with:
        context: .
        file: ${{ steps.prep.outputs.dockerfile }}
        build-args: PYTHON=${{ matrix.python-version }}
        platforms: linux/amd64,linux/arm64
        pull: true
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        # see: https://github.com/opencontainers/image-spec/blob/master/annotations.md
        labels: |
          org.opencontainers.image.title=${{ github.event.repository.name }}
          org.opencontainers.image.description=${{ github.event.repository.description }}
          org.opencontainers.image.url=${{ github.event.repository.html_url }}
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
