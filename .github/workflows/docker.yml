name: docker
on:
  push:
    branches:
    - master
    - dev
    - 'experimental/**'
    tags:
    - v*
  schedule:
  - cron: '0 4 * * *'  # nightlies at 4am UTC
env:
  TEST_TAG: hathor-core:test
jobs:
  buildx:
    name: buildx ${{ matrix.python-impl }}-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 180  # default is 360
    strategy:
      fail-fast: false
      matrix:
        python-impl:
        - python
        - pypy
        python-version:
        - '3.8'
        - '3.9'
        - '3.10'
        exclude:
        # XXX: pypy-3.10 does not exist yet
        - python-impl: pypy
          python-version: '3.10'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Prepare tags
      id: prep
      shell: python
      run: |
        import datetime
        import re
        def extract_pyver(filename):
            for line in open(filename).readlines():
                if line.startswith('ARG PYTHON'):
                    return line.split('=')[1].strip()
        ref = '${{ github.ref }}'
        dockerfile_cpython = 'Dockerfile'
        dockerfile_pypy = 'Dockerfile.pypy'
        default_python = 'python' + extract_pyver(dockerfile_cpython)
        default_pypy = 'pypy' + extract_pyver(dockerfile_pypy)
        if '${{ github.event_name }}' == 'schedule':
            base_version = 'nightly'
        elif ref.startswith('refs/tags/'):
            base_version = ref[10:].split('-', 1)[0]
        elif ref.startswith('refs/heads/'):
            base_version = ref[11:].replace('/', '-')
            if base_version == '${{ github.event.repository.default_branch }}':
              base_version = 'stable'
        elif ref.startswith('refs/pull/'):
            base_version = 'pr-${{ github.event.number }}'
        else:
            base_version = 'noop'
        if '${{ matrix.python-impl }}' == 'pypy':
            dockerfile = dockerfile_pypy
            suffix = 'pypy${{ matrix.python-version }}'
        else:
            dockerfile = dockerfile_cpython
            suffix = 'python${{ matrix.python-version }}'
        version = base_version + '-' + suffix
        tags = {version}
        if suffix == default_python:
            tags.add(base_version)
        elif suffix == default_pypy:
            tags.add(base_version + '-pypy')
        if re.match(r'^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$', base_version):
            minor = base_version.rpartition('.')[0]
            tags.add(minor + '-' + suffix)
            if suffix == default_python:
                tags.add('latest')
        elif '${{ github.event_name }}' == 'push':
            tags.add('sha-' + '${{ github.sha }}'[:8])
        print('::set-output name=version::' + version)
        images = []
        docker_image = '${{ secrets.DOCKERHUB_IMAGE }}'
        if docker_image:
            images.append(docker_image)
            print('::set-output name=login-dockerhub::true')
        else:
            print('::set-output name=login-dockerhub::false')
        ghcr_image = '${{ secrets.GHCR_IMAGE }}'
        if ghcr_image:
            images.append(ghcr_image)
            print('::set-output name=login-ghcr::true')
        else:
            print('::set-output name=login-ghcr::false')
        if images:
            print('::set-output name=tags::' + ','.join(f'{i}:{t}' for i in images for t in tags))
            print('::set-output name=push::true')
        else:
            print('::set-output name=tags::dont-push--local-only')
            print('::set-output name=push::false')
        print('::set-output name=created::' + datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'))
        print('::set-output name=dockerfile::' + dockerfile)
    - name: Set up QEMU  # arm64 is not available natively
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        install: true
        driver-opts: network=host
    - name: Login to DockerHub
      uses: docker/login-action@v1
      if: steps.prep.outputs.login-dockerhub
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      if: steps.prep.outputs.login-ghcr
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        # this key is setup such that every branch has its cache and new branches can reuse dev's cache, but not the other way around
        key: ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-${{ github.head_ref || github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.python-impl }}${{ matrix.python-version }}-refs/heads/master-
    - name: Build and export to Docker
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ${{ steps.prep.outputs.dockerfile }}
        build-args: PYTHON=${{ matrix.python-version }}
        pull: true
        load: true
        tags: ${{ env.TEST_TAG }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
    - name: Test image
      run: docker run --rm ${{ env.TEST_TAG }} quick_test --data / --testnet
    - name: Build and push
      uses: docker/build-push-action@v2
      continue-on-error: ${{ matrix.python-impl == 'pypy' }}  # PyPy is not first-class and has been causing some build failures
      with:
        context: .
        file: ${{ steps.prep.outputs.dockerfile }}
        build-args: PYTHON=${{ matrix.python-version }}
        platforms: linux/amd64,linux/arm64
        pull: true
        push: ${{ github.event_name != 'pull_request' && steps.prep.outputs.push }}
        tags: ${{ steps.prep.outputs.tags }}
        # see: https://github.com/opencontainers/image-spec/blob/master/annotations.md
        labels: |
          org.opencontainers.image.title=${{ github.event.repository.name }}
          org.opencontainers.image.description=${{ github.event.repository.description }}
          org.opencontainers.image.url=${{ github.event.repository.html_url }}
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
